     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 7856AB12CDAB561244-         sir DD 12AB5678h, 1256ABCDh, 12344344h ;definim sirul din problema
    13 00000009 433412             
    14                                      l equ ($-sir)/4 ;lungimea sirului sir
    15 0000000C 0000<rept>                  sir_high times l dw 0 ; acest sir va contine partea high a dw din sir
    16 00000012 0000<rept>                  sir_low times l dw 0 ;  acest sir va contine partea low a dw din sir
    17 00000018 00000000<rept>              rez times l dd 0    
    18 00000024 00                          cont db 0
    19                                  
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23 00000000 FC                              cld ;sirul va fi parcurs de la stanga la dreapta 
    24 00000001 B903000000                      mov ECX,l ; punem in registrul contor, lungimea sirului 
    25 00000006 BE[00000000]                    mov ESI,sir ;punem in ESI adresa de inceput a sirului
    26 0000000B BA00000000                      mov EDX,0   ;EDX va fi registru index pentru sir_high si sir_low
    27 00000010 E370                            jecxz sfarsit
    28                                          
    29                                          st_loop:
    30 00000012 AD                                  lodsd  ;aduncem in EAX valoarea de la [sir:ESI]
    31 00000013 6689C3                              mov BX,AX ;aducem in BX partea low a dublucuvantului 
    32                                             
    33 00000016 250000FFFF                          and EAX,0FFFF0000h ;izolam cuvantul high din EAX
    34 0000001B C1E810                              shr EAX,16 ;aducem dublucuvantul high in locul dublucuvantului low
    35                                              ;acum avem BX si in AX cele doua componente ale numarului cu care vom opera mai departe
    36                                              
    37 0000001E 668982[0C000000]                    mov [sir_high+EDX],AX  ;punem partea high, stocata in AX in sir_high
    38 00000025 66899A[12000000]                    mov [sir_low+EDX] ,BX  ;punem partea low, stocata in BX in sir_low
    39 0000002C 83C202                              add EDX,2              ;incrementam cu 2 indexul sirurilor deoarece lucram cu word-uri
    40                                              
    41 0000002F E2E1                            loop st_loop
    42                                          
    43                                          ;vom proiecta un algoritm de sortare pentru sir_high
    44 00000031 B903000000                      mov ECX,l ;punem in registrul contor, lungimea sirului
    45 00000036 BE[0C000000]                    mov ESI,sir_high ;punem in ESI adresa de inceput a sirului 
    46                                          
    47                                          bg_loop:
    48                                          
    49 0000003B 89F7                                mov EDI,ESI
    50 0000003D 83C702                              add EDI,2
    51 00000040 C605[24000000]03                    mov byte[cont],l
    52 00000047 293D[24000000]                      sub [cont],EDI
    53                                              
    54                                              slp:
    55                                              
    56 0000004D 668B86[0C000000]                        mov AX,[sir_high+ESI]
    57 00000054 663B87[0C000000]                        cmp AX,[sir_high+EDI]
    58                                              
    59 0000005B 7215                                    jb mic
    60                                              
    61 0000005D 668B9F[0C000000]                        mov BX,[sir_high+EDI]
    62 00000064 66899E[0C000000]                        mov [sir_high+ESI],BX
    63 0000006B 668987[0C000000]                        mov [sir_high+EDI],AX
    64                                              
    65                                                  mic:
    66                                              
    67 00000072 83C702                                  add EDI,2
    68 00000075 FE0D[24000000]                          dec byte[cont]
    69 0000007B 75D0                                jnz slp
    70 0000007D 83C602                              add ESI,2
    71 00000080 E2B9                            loop bg_loop
    72                                          
    73                                          sfarsit:
    74 00000082 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    75 00000084 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
