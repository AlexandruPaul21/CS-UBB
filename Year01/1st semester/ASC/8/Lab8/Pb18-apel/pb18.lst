     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,scanf,printf  ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import scanf msvcrt.dll   ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import printf msvcrt.dll
    11                                  
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14 00000000 00000000                    a dd 0
    15 00000004 00000000                    b dd 0
    16 00000008 00000000                    cont dd 0
    17 0000000C 2564000000000000            format_dec dd "%d",0
    18 00000014 2578000000000000            format_hex dd "%x",0
    19                                  
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23                                          
    24                                          ;scanf("%d",&a)
    25                                          
    26 00000000 68[00000000]                    push dword a
    27 00000005 68[0C000000]                    push dword format_dec
    28 0000000A FF15[00000000]                  call [scanf]
    29 00000010 83C408                          add ESP,4*2
    30                                          
    31                                          ;scanf("%x",&b)
    32                                          
    33 00000013 68[04000000]                    push dword b
    34 00000018 68[14000000]                    push dword format_hex
    35 0000001D FF15[00000000]                  call [scanf]
    36 00000023 83C408                          add ESP,4*2
    37                                          
    38 00000026 A1[00000000]                    mov EAX,[a]
    39 0000002B 0305[04000000]                  add EAX,[b]
    40                                          
    41 00000031 B900000000                      mov ECX,0 ;in ECX se numara bitii de 1
    42                                          ;numaram biti de 1 ai rezultatului 
    43                                          cnt:
    44 00000036 C705[00000000]0100-                 mov dword[a],1
    44 0000003E 0000               
    45 00000040 2105[00000000]                      and [a],EAX
    46 00000046 030D[00000000]                      add ECX,[a]
    47 0000004C D1E8                                shr EAX,1
    48 0000004E 75E6                            jnz cnt
    49                                          
    50 00000050 890D[08000000]                  mov [cont],ECX ;punem in cont ce vrem sa afisam
    51                                          ;printf("%d",cont)
    52                                          
    53 00000056 FF35[08000000]                  push dword [cont]
    54 0000005C 68[0C000000]                    push dword format_dec
    55 00000061 FF15[00000000]                  call [printf]
    56 00000067 83C408                          add ESP,4*2
    57                                          
    58 0000006A 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    59 0000006C FF15[00000000]                  call    [exit]       ; call exit to terminate the program
