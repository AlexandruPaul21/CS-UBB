     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 020103FD                    A db 2,1,3,-3 ;definim sirul a
    14                                      l equ $-A     ;lungimea sirului a
    15 00000004 0405FB07                    B db 4,5,-5,7 ;definim sirul b 
    16                                      r equ $-B     ;lungimea sirului b
    17 00000008 00<rept>                    R times 10 db 0 ;rezervam spatiu pentru sirul destinatie
    18                                  
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22 00000000 B904000000                      mov ECX,l ;pregatim registrul ECX pentru a parcurge sirul 
    23 00000005 BE00000000                      mov ESI,0      ;Initializam registrul indice cu 0
    24 0000000A BA00000000                      mov EDX,0
    25 0000000F E318                            jecxz sf       ;tratam cazul in care ECX  e 0
    26                                          start_loop:
    27 00000011 8A86[00000000]                      mov AL,[A+ESI] ;punem in AL, elementul curent
    28                                              
    29 00000017 A801                                test AL,00000001b    ;daca elemntul este impar ZF=0
    30 00000019 740B                                jz par         ;daca elemntul este par, adica ZF=1 atunci nu executam instructiunea 
    31 0000001B 3C00                                cmp AL,0
    32 0000001D 7C07                                jnge negat      ;daca elemntul este negativ, nu executam 
    33                                              
    34 0000001F 8882[08000000]                      mov [R+EDX],AL  ; daca elemntul indeplineste conditiile, il punem in sir
    35 00000025 42                                  inc EDX         ; incrementam lungimea sirului de facut
    36                                              
    37                                              negat:
    38                                              par:
    39                                              
    40 00000026 46                                  inc ESI        ;incrementam indicele la care ne aflam
    41 00000027 E2E8                            loop start_loop
    42                                          sf:
    43                                           
    44 00000029 B904000000                      mov ECX,r  ;pregatim registrul ECX pentru a parcurge sirul
    45 0000002E BE00000000                      mov ESI,0  ;Initializam registrul indice cu 0
    46 00000033 E318                            jecxz sf2       ;tratam cazul in care ECX  e 0
    47                                          start_loop2:
    48 00000035 8A86[04000000]                      mov AL,[B+ESI]  ;punem in AL, elementul curent
    49                                              
    50 0000003B A801                                test AL,01h   ;daca elemntul este impar ZF=0
    51 0000003D 740B                                jz par2       ;daca elemntul este par, adica ZF=1 atunci nu executam instructiunea
    52 0000003F 3C00                                cmp AL,0      ;seteaza OF si SF
    53 00000041 7C07                                jnge negat2   ;daca elemntul este negativ, nu executam
    54                                              
    55 00000043 8882[08000000]                      mov [R+EDX],AL  ; daca elemntul indeplineste conditiile, il punem in sir
    56 00000049 42                                  inc EDX         ; incrementam lungimea sirului de facut
    57                                              
    58                                              negat2:
    59                                              par2:
    60                                              
    61 0000004A 46                                  inc ESI        ;incrementam indicele la care ne aflam
    62                                              
    63 0000004B E2E8                            loop start_loop2
    64                                          sf2:
    65 0000004D 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    66 0000004F FF15[00000000]                  call    [exit]       ; call exit to terminate the program
