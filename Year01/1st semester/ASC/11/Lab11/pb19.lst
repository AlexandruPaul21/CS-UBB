     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,fscanf,printf,fopen,fclose
     8                                  import exit msvcrt.dll
     9                                  import fscanf msvcrt.dll
    10                                  import printf msvcrt.dll
    11                                  import fopen msvcrt.dll
    12                                  import fclose msvcrt.dll
    13                                  
    14                                  extern construct
    15                                  
    16                                  ; our data is declared here (the variables needed by our program)
    17                                  segment data use32 class=data public
    18 00000000 6E756D6572652E7478-         file_name db "numere.txt",0
    18 00000009 7400               
    19 0000000B 7200                        r db "r",0
    20 0000000D <res 00000004>              description_fis resd 1
    21 00000011 25642000                    format db "%d ",0
    22 00000015 5C6E00                      new_line db "\n",0
    23 00000018 4E756D65726520706F-         afisare_poz db "Numere pozitive:",0
    23 00000021 7A69746976653A00   
    24 00000029 4E756D657265206E65-         afisare_neg db "Numere negative:",0
    24 00000032 6761746976653A00   
    25 0000003A 00000000                    nr dw 0,0
    26 0000003E <res 0000001E>              s resw 15
    27 0000005C <res 0000001E>              n resw 15
    28 0000007A <res 0000001E>              p resw 15
    29 00000098 00                          l db 0
    30 00000099 00                          ln db 0
    31 0000009A 00                          lp db 0
    32                                  
    33                                  ; our code starts here
    34                                  segment code use32 class=code public
    35                                      start:
    36                                          ; EAX=fopen("numere.txt","r") deschidem fisierul
    37 00000000 68[0B000000]                    push dword r
    38 00000005 68[00000000]                    push dword file_name
    39 0000000A FF15[00000000]                  call [fopen]
    40 00000010 83C408                          add ESP,4*2
    41                                          
    42 00000013 83F800                          cmp EAX,0
    43 00000016 7438                            je sf
    44                                          
    45 00000018 A3[0D000000]                    mov [description_fis],EAX
    46 0000001D BF[3E000000]                    mov EDI,s
    47                                          
    48                                          strt:
    49                                          ;fscanf([description_fis],format,nr)
    50 00000022 68[3A000000]                    push dword nr
    51 00000027 68[11000000]                    push dword format
    52 0000002C FF35[0D000000]                  push dword [description_fis]
    53 00000032 FF15[00000000]                  call [fscanf]
    54 00000038 83C40C                          add ESP,4*3
    55                                          
    56                                          ;conditia de oprire, cand functia fscanf pune in EAX -1
    57 0000003B 83F8FF                          cmp EAX,0FFFFFFFFh
    58 0000003E 7410                            je sf
    59                                          ;stocam elementul in sir
    60 00000040 66A1[3A000000]                  mov AX,[nr]
    61 00000046 66AB                            stosw
    62 00000048 FE05[98000000]                  inc byte[l]
    63                                          
    64 0000004E EBD2                            jmp strt
    65                                          sf:
    66                                      
    67                                          ;fclose([description_fis])-inchidem fisierul
    68 00000050 FF35[0D000000]                  push dword[description_fis] 
    69 00000056 FF15[00000000]                  call [fclose]
    70 0000005C 83C404                          add ESP,4
    71                                          
    72                                          ;construct(s,l,n,p) - se apeleaza functia construct cu parametrii s, lungimea lui si cele doua siruri de construit
    73 0000005F 68[7A000000]                    push dword p
    74 00000064 68[5C000000]                    push dword n
    75 00000069 FF35[98000000]                  push dword [l]
    76 0000006F 68[3E000000]                    push dword s
    77 00000074 E8(00000000)                    call construct
    78 00000079 83C410                          add ESP,4*4
    79                                          
    80 0000007C 881D[99000000]                  mov byte[ln],BL
    81 00000082 8815[9A000000]                  mov byte[lp],DL
    82                                         
    83                                          ;printf("%d",EBX,EDX)
    84                                          ;push dword EDX
    85                                          ;push dword EBX
    86                                          ;push dword afisare
    87                                          ;call [printf]
    88                                          ;add ESP,4*3
    89                                          
    90                                          ;printf("Numere negative:")
    91 00000088 68[29000000]                    push dword afisare_neg
    92 0000008D FF15[00000000]                  call [printf]
    93 00000093 83C404                          add ESP,4
    94                                          
    95 00000096 BE[5C000000]                    mov ESI,n
    96 0000009B B900000000                      mov ECX,0
    97 000000A0 8A0D[99000000]                  mov CL,[ln]
    98                                          af:
    99 000000A6 66AD                                lodsw
   100 000000A8 98                                  cwde
   101 000000A9 51                                  push ECX
   102                                              ;printf("%d",EAX)
   103 000000AA 50                                  push dword EAX
   104 000000AB 68[11000000]                        push dword format
   105 000000B0 FF15[00000000]                      call [printf]
   106 000000B6 83C408                              add ESP,4*2
   107 000000B9 59                                  pop ECX
   108 000000BA E2EA                            loop af
   109                                          
   110                                          ;printf("\n")
   111 000000BC 68[15000000]                    push dword new_line
   112 000000C1 FF15[00000000]                  call [printf]
   113 000000C7 83C404                          add ESP,4
   114                                          
   115                                          ;printf("Numere pozitive:")
   116 000000CA 68[18000000]                    push dword afisare_poz
   117 000000CF FF15[00000000]                  call [printf]
   118 000000D5 83C404                          add ESP,4
   119                                          
   120 000000D8 BE[7A000000]                    mov ESI,p
   121 000000DD B900000000                      mov ECX,0
   122 000000E2 8A0D[9A000000]                  mov CL,[lp]
   123                                          af1:
   124 000000E8 66AD                                lodsw
   125 000000EA 98                                  cwde
   126 000000EB 51                                  push ECX
   127                                              ;printf("%d",EAX)
   128 000000EC 50                                  push dword EAX
   129 000000ED 68[11000000]                        push dword format
   130 000000F2 FF15[00000000]                      call [printf]
   131 000000F8 83C408                              add ESP,4*2
   132 000000FB 59                                  pop ECX
   133 000000FC E2EA                            loop af1
   134                                          
   135                                          
   136                                          ; exit(0)
   137 000000FE 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   138 00000100 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
